name: Run Tests

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main
    
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  check-generate:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Check that generated artifacts are up-to-date
      run: |
        make generate
        echo "Running 'git status' ..."
        git status --porcelain | tee status.out
        if [[ -s status.out ]]; then
          echo "Generated artifacts are not up-to-date; probably 'make generate' was not run before commiting"
          exit 1
        else
          echo "Generated artifacts are up-to-date"
        fi

  test-scaffold:
    runs-on: ubuntu-22.04
    needs: check-generate
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup go
      uses: actions/setup-go@v3
      with:
        go-version-file: 'go.mod'
    - name: Build scaffold
      run: |
        repository=github.com/${{ github.repository }}
        version=$(TZ=UTC git --no-pager show --quiet --abbrev=12 --date='format-local:%Y%m%d%H%M%S' --format="v0.0.0-%cd-%h")
        go build -o bin/scaffold -ldflags "-X \"main.version=$repository $version\"" ./scaffold
        echo "Running 'scaffold --version' ..."
        bin/scaffold --version
    - name: Run scaffold
      run: |
        mkdir $RUNNER_TEMP/src
        ./bin/scaffold \
          --group-name example.io \
          --group-version v1alpha1 \
          --kind MyComponent \
          --operator-name mycomponent-operator.example.io \
          --go-module example.io/mycomponent-operator \
          --image mycomponent-operator:latest \
          $RUNNER_TEMP/src
    - name: Build generated operator
      run: |
        cd $RUNNER_TEMP/src
        make

  test-sample-operators:
    runs-on: ubuntu-22.04
    needs: check-generate
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Create Kind Cluster
      uses: helm/kind-action@v1
      with:
        version: v0.18.0
        cluster_name: kind
    - name: Deploy operators
      run: |
        kubectl create ns operators
        kubectl create clusterrolebinding operators --clusterrole cluster-admin --serviceaccount operators:default
        cat > $RUNNER_TEMP/Dockerfile <<END
        FROM scratch
        WORKDIR /
        COPY bin/manager /manager
        USER 65532:65532
        ENTRYPOINT ["/manager"]
        END
        cd examples
        for o in *; do
          cd $o
          go build -o bin/manager
          ls -la bin
          cp $RUNNER_TEMP/Dockerfile .
          docker build -t $o-operator:latest .
          docker history $o-operator:latest
          docker run --rm $o-operator:latest -h
          kind load docker-image $o-operator:latest
          for f in crds/*; do kubectl apply -f $f; done
          kubectl -n operators run $o-operator --image $o-operator:latest --image-pull-policy IfNotPresent
          for i in 1 2 3 4 5 6 7 8 9 10; do
            kubectl -n operators get pods
            sleep 1
          done
          kubectl -n operators logs -f $o-operator
          kubectl -n operators wait --for condition=Ready pods/$o-operator
          cd ..
        done
    - name: Deploy test objects
      run: |
        kubectl apply -f - <<END
        apiVersion: example.io/v1alpha1
        kind: HelmComponent
        metadata:
          name: test
        END
        kubectl wait --for condition=Ready helmcomponents/test


